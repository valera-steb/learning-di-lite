цель:
.добиваюсь идеи передачи интерфейсов между объектами.
  .т.е. есть 3 объекта. Они взаимодействую друг с другом.
  .однако каждое из взаимодействий своё, и для него выделяеться интерфейс.
  .как добиться от di-lite что-бы он каждому объекту подсовывал свой интерфейс к другим

.а какой фактор я зафиксировал?
  .от одного объекта может потребоваться несколько разных интерфейсов
  в зависимоти от того, кто его использует. Точнее как интерпретирует этот объект,
  как его использует.


разные подходы к связыванию объектов.
.т.е. построению из классов.


для каждой области задач использовать свой интерфейс/набор интерфейсов.
.т.е. не обязательно указывать to/from, а говорить forDomain.
! а почему-бы тогда не создавать разные объекты/классы под это?

=> как отобразить доменную структуру кода?
  .т.к. проблема - мне надо уложить мои объекты в виде единого дерева папок,
  то, логичный вопрос - а как мне в самом объекте объявить что он относиться туда-то
  и где-то это всё отобразить...

  .т.е. можно ли как с графом сделать?

  .такой-то объект принадлежит таким-то предметным областям, и в них отдаёт такие-то интерфейсы.
  .при построении зависимости, спрашивать объект и интерисующую область.
  .если считывать только конфиги, можно будет увидеть:
    .объекты и их принадлежность к областям.
    .взаимосвязи объектов - кто кого запрашивает...



сборка с помошью require.js
.вопросы:
  .а можно работать в виде пространств имён?:
    .domain
    .domain.item
    .domain.itemList
    .domain.item.subItem

  .сборка контекста:
    .как вообще?
    .как я пойму, что мой контекст готов?


require_for_di-lite - создание нескольких областей:
.элементы:
  .singleton
  .shared singleton
  .shared